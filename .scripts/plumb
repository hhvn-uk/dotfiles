#!/bin/sh

echo(){
	printf '%s\n' "$*"
}

matches(){
	echo "$arg" | grep -Ei "$@" >/dev/null
}

fmatches(){
	file "$arg" | grep -Ei "$@" >/dev/null
}

fmagic(){
	isfile "$arg" || return 1
	grep "$1" < "$arg" >/dev/null
}

_envsubst(){
	str="$*"

	env |
	while read -r line
	do
		str=$(echo "$str" | awk -v "var=${line%%=*}" -v "val=${line#*=}" '
			{
				regex = sprintf("\\$%s", var)
				gsub(regex, val)
				print
			}'
		)
		echo "$str"
	done | tail -n 1
}

plumb(){
	t="$1"; shift
	[ $norun -eq 1 ] && return
	export norun=1
	case "$t" in
	gui)
		>/dev/null 2>/dev/null nohup sh -c "$*; rm '$file'" &
		;;
	terminal)
		>/dev/null 2>/dev/null nohup ${TERMINAL:-st} sh -c "$*; rm '$file'" &
		;;
	prompt)
		>/dev/null 2>/dev/null nohup ${TERMINAL:-st} sh -c "$(dmenu -i -p "$*"); rm '$file'" &
		;;
	matchlater)
		export norun=0
		>/dev/null 2>/dev/null nohup sh -c "$*" &
		;;
	*)
		herbe "No such plumb-type: $t"
		;;
	esac
}

replace(){
	arg=$(echo "$arg" | sed "$*")
}

isfile(){
	[ -z "$1" ] && {
		[ -f "$arg" ]
		return $?
	}
	[ -n "$1" ] && {
		[ -f "$1" ]
		return $?
	}
}

hascmd(){
	command -v "$*" >/dev/null
}

wasfetched(){
	[ -n "$orig" ]
}

fetch(){
	file="/tmp/plumb.$(basename "$arg")"
	while [ -f $file ]
	do
		file="/tmp/plumb.$(base64 </dev/urandom | tr -d / | head -c10).$(basename "$arg")"
	done
	$proxy curl $([ "$verbose" != "y" ] && echo -s) "$(echo "$arg" | sed -E 's/]|\[|}|\{/\\&/g')" > "$file"
	export orig="$arg"
	export arg="$file"
	removelater "$file"
}

removelater(){
	[ -z "$exittrap" ] && exittrap="$*"
	exittrap="$exittrap; rm -rf \"$*\""
	trap "$exittrap" EXIT
}

mime(){
	mime=$($proxy curl -Li$([ "$verbose" != "y" ] && echo s) "$(echo "$arg" | sed -E 's/]|\[|}|\{/\\&/g')" |
		awk '/^HTTP/ && $2 != "200" {s=1}; /^HTTP/ && $2 == "200" {p=1}; /^[[:space:]]*$/ {if (s) s=0; else exit 1}; p' |
		tr '[:upper:]' '[:lower:]' | awk '$1 == "content-type:" {print $2}')
	echo "$mime" | tee /dev/stderr | grep -i "$1" >/dev/null
}

case "$1" in
	-v)
		verbose=y
		shift
		;;
esac

[ -n "$PLUMB" ] && exit
export PLUMB="$$"

for arg in "$@"
do
	export norun=0
	export gui=0
	export proxy=""
	export arg=$(_envsubst "$arg")
	export orig=""

	# remove file://
	matches "^file://" &&
	replace 's~^file://~~'

	# network
	matches "://.*\.onion" &&
	export proxy="torsocks"

	matches "^magnet:" &&
	plumb terminal 'addtorrent "$arg"'

	matches "^(gopher|http)s?://.*\.(ogg|mp3|opus|flac|pls)$" &&
	plumb terminal '$proxy mpv --pause $arg'

	matches "^(gopher|http)s?://.*\.gif$" &&
	plumb gui '$proxy mpv --loop-file $arg'

	matches "(youtu.be|youtube.com).*/feeds/" &&
	plumb gui 'sfeed_addfeed "$arg"'

	matches "^(gopher|http)s?://.*\.(mkv|mp4|avi|webm|ogv|gifv|mp4|ape|m3u|m3u8)$" ||
	matches "^https?://(www\.|m\.)?(youtube.com|youtu.be)" ||
	matches "^https?://.*/videos/watch/" || # peertube
	matches "^https?://videos?\..*/w/" &&   # peertube also uses /w/, which is so ambiguous I made this subdomain-dependant
	plumb gui 'queuevid "$arg" && $proxy mpv --pause "$arg"'

	matches "^https?://" &&
	! mime "text/html" &&
	fetch

	matches "^https?://" ||
	matches "\.html?$" ||
	fmatches "HTML" &&
	plumb gui 'qutebrowser $arg'

	matches "^gophers?://(.*/[17+0](/|$)|[^/]*$)" &&
	plumb terminal '$proxy zygo $arg'

	matches "^gophers?://" &&
	fetch

	matches "^mailto:" &&
	plumb terminal 'neomutt $(echo "$arg" | sed "s~^mailto:~~")'

	matches "^finger://" &&
	plumb terminal '$proxy finger $(echo "$arg" | sed "s~^finger://~~"); cat'

	matches "^ssh://" &&
	plumb terminal '$proxy ssh $(echo "$arg" | sed "s~^ssh://~~;s~:[0-9]*~~")'

	matches "^git://" &&
	plumb terminal '$proxy git clone $arg'

	# local files now
	fmatches "gzip" &&
	isfile &&
	plumb matchlater 'gunzip < $arg > $arg.new && mv $arg.new $arg' &&
	removelater "$arg.new"

	fmatches "zip.*archive" &&
	isfile
	plumb matchlater 'unzip -p $arg > $arg.new && mv $arg.new $arg' &&
	removelater "$arg.new"

	fmatches "PGP.*public.*key|PGP.*ring" &&
	isfile &&
	plumb terminal 'gpg --import $arg; sleep 5'

	fmatches "PGP.*signature" &&
	isfile &&
	plumb terminal 'gpg --verify $arg; sleep 5'

	fmatches "PGP.*message|PGP.*encrypted" &&
	isfile &&
	plumb terminal 'gpg -d $arg; sleep 5'

	matches ".*\.(epub|ps|eps|pdf|dvi|djvu)$" ||
	fmatches "pdf|postscript" &&
	isfile &&
	plumb gui 'zathura $arg'

	matches ".*\.gif$" &&
	isfile &&
	plumb gui 'mpv --loop-file $arg'

	matches ".*\.(mkv|mp4|avi|webm|ogg|ogv|gifv|mp3|mp4|opus|flac|ape|m3u|m3u8)$" ||
	fmatches "video|matroska|audio|sound" &&
	isfile &&
	plumb terminal 'mpv --pause $arg'

	matches ".*\.(jpe?g|gif|tiff?|ppm|bit|bmp|png|xpm)$" ||
	fmatches "image" &&
	isfile &&
	plumb gui 'sxiv $arg'

	matches "\.?/.*\.[0-9]p?$" &&
	fmatches "(roff|preprocessor)" &&
	isfile &&
	plumb terminal 'man $arg'

	matches "\.(gph|gophermap)$|(^|/)gophermap$" &&
	isfile &&
	plumb terminal 'cgo -f $arg'

	matches "\.(atom|rss)$|rss\.xml$|atom\.xml$" ||
	fmatches "atom|rss" ||
	fmagic "<feed.*xmlns.*http://www.w3.org/2005/Atom" ||
	fmagic "<rss" &&
	wasfetched &&
	plumb gui 'sfeed_addfeed $orig'

	matches "\.(atom|rss)$|rss\.xml$" ||
	fmatches "atom|rss" ||
	fmagic "<feed.*xmlns.*http://www.w3.org/2005/Atom" ||
	fmagic "<rss" &&
	! wasfetched &&
	plumb terminal 'sfeed < $arg | sort -rn | sfeed_curses'

	# dmarc reports
	fmagic "<feedback" &&
	fmagic "<policy_published" &&
	fmagic "<dkim" &&
	plumb terminal 'dmarc < $arg; cat'

	# numbered file
	matches ":[0-9][0-9]*$" &&
	isfile ${arg%:*} &&
	plumb terminal 'vim +${arg##*:} ${arg%:*}'

	# catch all for files
	matches ".*" &&
	isfile &&
	plumb terminal 'vim $arg'

	# include files
	matches ".*\.h$" &&
	isfile "/usr/include/$arg" &&
	plumb terminal 'vim /usr/include/$arg'

	matches ".*\.h$" &&
	isfile "/usr/local/include/$arg" &&
	plumb terminal 'vim /usr/local/include/$arg'

	# catch-all for non-files
	matches ".*" &&
	plumb prompt 'Plumb to (use $arg): '
done
wait
